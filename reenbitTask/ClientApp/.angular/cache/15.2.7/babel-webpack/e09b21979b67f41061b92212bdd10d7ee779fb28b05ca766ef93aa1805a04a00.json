{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nfunction HomeComponent_img_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r1.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class HomeComponent {\n  constructor() {\n    this.title = 'reenbit test app';\n    this.imageMatrix = [];\n    this.counter = 0;\n    this.imageUrl = \"\";\n  }\n  increment() {\n    this.counter++;\n  }\n  reset() {\n    this.counter = 0;\n  }\n  onFileSelected() {\n    const inputNode = document.querySelector('#file');\n    if (typeof FileReader !== 'undefined') {\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.imageSrc = e.target.result;\n        this.readImage(inputNode.files[0]); // Uncomment this line to call readImage with the selected file\n      };\n\n      reader.readAsArrayBuffer(inputNode.files[0]); // Uncomment this line if you want to read as ArrayBuffer\n    }\n  }\n\n  readImage(file) {\n    const reader = new FileReader();\n    reader.onload = e => {\n      this.imageUrl = e.target.result;\n      this.convertImageToMatrix(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n  convertImageToMatrix(dataUrl) {\n    const img = new Image();\n    img.src = dataUrl.toString();\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      if (ctx) {\n        ctx.drawImage(img, 0, 0, img.width, img.height);\n        const imageData = ctx.getImageData(0, 0, img.width, img.height).data;\n        this.imageMatrix = this.createGrayscaleMatrix(imageData, img.width, img.height);\n      }\n    };\n  }\n  createGrayscaleMatrix(imageData, width, height) {\n    const matrix = [];\n    for (let i = 0; i < height; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < width; j++) {\n        const index = (i * width + j) * 4; // Each pixel has 4 values (RGBA)\n        const grayscaleValue = (imageData[index] + imageData[index + 1] + imageData[index + 2]) / 3;\n        matrix[i][j] = grayscaleValue;\n      }\n    }\n    return matrix;\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)();\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-root\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[\"mat-fab\", \"\", 3, \"click\"], [\"type\", \"button\", \"mat-button\", \"\", 3, \"click\"], [\"hidden\", \"\", \"type\", \"file\", \"id\", \"file\", 3, \"change\"], [\"fileInput\", \"\"], [\"alt\", \"Selected Image\", 3, \"src\", 4, \"ngIf\"], [\"alt\", \"Selected Image\", 3, \"src\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"br\");\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"br\");\n      i0.ɵɵelementStart(5, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_5_listener() {\n        return ctx.increment();\n      });\n      i0.ɵɵtext(6, \"Click me\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_8_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(11);\n        return i0.ɵɵresetView(_r0.click());\n      });\n      i0.ɵɵtext(9, \"Upload File\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 2, 3);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_10_listener() {\n        return ctx.onFileSelected();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, HomeComponent_img_12_Template, 1, 1, \"img\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.counter);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.imageUrl);\n    }\n  },\n  dependencies: [i1.NgIf, i2.MatButton, i2.MatFabButton],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","counter","imageUrl","increment","reset","onFileSelected","inputNode","document","querySelector","FileReader","reader","onload","e","imageSrc","target","result","readImage","files","readAsArrayBuffer","file","convertImageToMatrix","readAsDataURL","dataUrl","img","Image","src","toString","canvas","createElement","ctx","getContext","width","height","drawImage","imageData","getImageData","data","imageMatrix","createGrayscaleMatrix","matrix","i","j","index","grayscaleValue","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\FGVN\\source\\repos\\reenbitTask\\reenbitTask\\ClientApp\\src\\app\\home\\home.component.html","C:\\Users\\FGVN\\source\\repos\\reenbitTask\\reenbitTask\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["<div>\r\n  <br>\r\n  <p>{{ counter }}</p>\r\n  <br>\r\n  <button mat-fab (click)=\"increment()\">Click me</button>\r\n  <br>\r\n  <button type=\"button\" mat-button (click)=\"fileInput.click()\">Upload File</button>\r\n  <input hidden (change)=\"onFileSelected()\" #fileInput type=\"file\" id=\"file\">\r\n  <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" alt=\"Selected Image\" />\r\n\r\n\r\n</div>\r\n","// app.component.ts\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  title = 'reenbit test app';\r\n  public counter: number;\r\n  imageUrl: string | ArrayBuffer;\r\n  imageMatrix: number[][] = [];\r\n  imageSrc: any;\r\n\r\n  constructor() {\r\n    this.counter = 0;\r\n    this.imageUrl = \"\";\r\n  }\r\n\r\n  public increment() {\r\n    this.counter++;\r\n  }\r\n\r\n  public reset() {\r\n    this.counter = 0;\r\n  }\r\n  onFileSelected() {\r\n    const inputNode: any = document.querySelector('#file');\r\n\r\n    if (typeof (FileReader) !== 'undefined') {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e: any) => {\r\n        this.imageSrc = e.target.result;\r\n        this.readImage(inputNode.files[0]); // Uncomment this line to call readImage with the selected file\r\n      };\r\n\r\n      reader.readAsArrayBuffer(inputNode.files[0]); // Uncomment this line if you want to read as ArrayBuffer\r\n    }\r\n  }\r\n\r\n\r\n  readImage(file: File): void {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e: any) => {\r\n      this.imageUrl = e.target.result;\r\n      this.convertImageToMatrix(e.target.result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  convertImageToMatrix(dataUrl: string | ArrayBuffer): void {\r\n    const img = new Image();\r\n    img.src = dataUrl.toString();\r\n\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n        const imageData = ctx.getImageData(0, 0, img.width, img.height).data;\r\n\r\n        this.imageMatrix = this.createGrayscaleMatrix(imageData, img.width, img.height);\r\n      }\r\n    };\r\n  }\r\n\r\n  createGrayscaleMatrix(imageData: Uint8ClampedArray, width: number, height: number): number[][] {\r\n    const matrix: number[][] = [];\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      matrix[i] = [];\r\n      for (let j = 0; j < width; j++) {\r\n        const index = (i * width + j) * 4; // Each pixel has 4 values (RGBA)\r\n        const grayscaleValue = (imageData[index] + imageData[index + 1] + imageData[index + 2]) / 3;\r\n        matrix[i][j] = grayscaleValue;\r\n      }\r\n    }\r\n\r\n    return matrix;\r\n  }\r\n  //read image - convert to bits - approx bit matrix - show result\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}